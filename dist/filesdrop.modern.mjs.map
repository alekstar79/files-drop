{"version":3,"file":"filesdrop.modern.mjs","sources":["../lib/filesdrop.ts"],"sourcesContent":["type FileDropAccept = 'drop' | 'paste' | 'click'\n\ninterface FileDropEventInit extends EventInit {\n  action: FileDropAccept;\n  files: File[];\n}\n\nfunction getMatchingItems(\n  list: DataTransferItemList,\n  acceptVal: string,\n  multiple: boolean\n): DataTransferItem[] {\n  const dataItems = Array.from(list)\n  let results: DataTransferItem[]\n\n  // Return the first item (or undefined) if our filter is for all files\n  if (acceptVal === '') {\n    results = dataItems.filter(item => item.kind === 'file')\n    return (multiple) ? results : [results[0]]\n  }\n\n  // Split accepts values by ',' then by '/'. Trim everything & lowercase.\n  const accepts = acceptVal.toLowerCase().split(',').map((accept) => {\n    return accept.split('/').map(part => part.trim())\n  }).filter(acceptParts => acceptParts.length === 2)\n\n  const predicate = (item: DataTransferItem) => {\n    if (item.kind !== 'file') return false\n\n    // Parse the type.\n    const [typeMain, typeSub] = item.type.toLowerCase().split('/').map(s => s.trim())\n\n    for (const [acceptMain, acceptSub] of accepts) {\n      // Look for an exact match, or a partial match if * is accepted, eg image/*.\n      if (typeMain === acceptMain && (acceptSub === '*' || typeSub === acceptSub)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  results = dataItems.filter(predicate)\n  if (!multiple) {\n    results = [results[0]]\n  }\n\n  return results\n}\n\nfunction getFileData(data: DataTransfer, accept: string, multiple: boolean): File[]\n{\n  const dragDataItems = getMatchingItems(data.items, accept, multiple)\n  const files: File[] = []\n\n  // This is because Map doesn't like the null type returned by getAsFile\n  dragDataItems.forEach((item) => {\n    const file = item.getAsFile()\n    if (file === null) return\n    files.push(file)\n  })\n\n  return files\n}\n\n// Safari and Edge don't quite support extending Event, this works around it.\nfunction fixExtendedEvent(instance: Event, type: Function): void\n{\n  if (!(instance instanceof type)) {\n    Object.setPrototypeOf(instance, type.prototype)\n  }\n}\n\nfunction hide(el: HTMLElement): void\n{\n  Object.assign(el.style, { visibility: 'hidden', position: 'fixed', left: '-9999px', top: '-9999px' })\n}\n\nfunction clickEvent(): MouseEvent\n{\n  return new MouseEvent('click', { cancelable: true, bubbles: true, view: window })\n}\n\nexport class FileDropEvent extends Event\n{\n  private _action: FileDropAccept\n  private _files: File[]\n  constructor(typeArg: string, eventInitDict: FileDropEventInit)\n  {\n    super(typeArg, eventInitDict)\n\n    fixExtendedEvent(this, FileDropEvent)\n    this._action = eventInitDict.action\n    this._files = eventInitDict.files\n  }\n\n  get action() {\n    return this._action\n  }\n\n  get files() {\n    return this._files\n  }\n}\n\nexport class FilesDropElement extends HTMLElement\n{\n  static register(tag = 'file-drop') {\n    if ('customElements' in window) {\n      customElements.define(tag, this)\n    }\n  }\n\n  private _dragEnterCount = 0\n\n  constructor()\n  {\n    super()\n\n    this._onDragEnter = this._onDragEnter.bind(this)\n    this._onDragLeave = this._onDragLeave.bind(this)\n    this._onDrop = this._onDrop.bind(this)\n    this._onPaste = this._onPaste.bind(this)\n    this._onClick = this._onClick.bind(this)\n  }\n\n  get accept() {\n    return this.getAttribute('accept') || ''\n  }\n\n  set accept(val: string) {\n    this.setAttribute('accept', val)\n  }\n\n  get multiple(): boolean {\n    return this.hasAttribute('multiple')\n  }\n\n  get clickable(): boolean {\n    return this.hasAttribute('clickable')\n  }\n\n  connectedCallback()\n  {\n    this.addEventListener('dragover', event => event.preventDefault())\n    this.addEventListener('drop', this._onDrop)\n    this.addEventListener('dragenter', this._onDragEnter)\n    this.addEventListener('dragend', () => this._reset())\n    this.addEventListener('dragleave', this._onDragLeave)\n    this.addEventListener('paste', this._onPaste)\n\n    if (this.clickable) {\n      this.addEventListener('click', this._onClick)\n    }\n  }\n\n  disconnectedCallback()\n  {\n    this.removeEventListener('dragover', event => event.preventDefault())\n    this.removeEventListener('drop', this._onDrop)\n    this.removeEventListener('dragenter', this._onDragEnter)\n    this.removeEventListener('dragend', () => this._reset())\n    this.removeEventListener('dragleave', this._onDragLeave)\n    this.removeEventListener('paste', this._onPaste)\n\n    if (this.clickable) {\n      this.removeEventListener('click', this._onClick)\n    }\n  }\n\n  private _onDragEnter(event: DragEvent)\n  {\n    this._dragEnterCount += 1\n\n    if (this._dragEnterCount > 1) return\n    if (event.dataTransfer === null) {\n      this.classList.add('drop-invalid')\n      return\n    }\n\n    // We don't have data, attempt to get it and if it matches, set the correct state.\n    const items = event.dataTransfer.items\n    const matchingFiles = getMatchingItems(items, this.accept, this.multiple)\n    const validDrop: boolean = event.dataTransfer && event.dataTransfer.items.length\n      ? (matchingFiles[0] !== undefined)\n      // Safari doesn't give file information on drag enter,\n      // so the best we can do is return valid.\n      : true\n\n    if (validDrop) {\n      this.classList.add('drop-valid')\n    } else {\n      this.classList.add('drop-invalid')\n    }\n  }\n\n  private _onDragLeave()\n  {\n    this._dragEnterCount -= 1\n\n    if (this._dragEnterCount === 0) {\n      this._reset()\n    }\n  }\n\n  private _onDrop(event: DragEvent)\n  {\n    event.preventDefault()\n\n    if (event.dataTransfer === null) return\n\n    this._reset()\n    const action = 'drop'\n    const files = getFileData(event.dataTransfer, this.accept, this.multiple)\n\n    if (files === undefined) return\n\n    this.dispatchEvent(new FileDropEvent('filedrop', { action, files }))\n  }\n\n  private _onPaste(event: ClipboardEvent)\n  {\n    const action = 'paste'\n\n    if (!event.clipboardData) return\n    const files = getFileData(event.clipboardData, this.accept, this.multiple)\n    if (files === undefined) return\n\n    this.dispatchEvent(new FileDropEvent('filedrop', { action, files }))\n  }\n\n  private _reset()\n  {\n    this._dragEnterCount = 0\n    this.classList.remove('drop-valid')\n    this.classList.remove('drop-invalid')\n  }\n\n  _onClick(): Promise<File[] | []>\n  {\n    return new Promise(() => {\n      const input = document.createElement('input')\n      const click = clickEvent()\n\n      input.multiple = this.multiple\n      input.accept = this.accept\n      input.type = 'file'\n\n      hide(input)\n\n      input.addEventListener('change', (inputEvent: Event) => {\n        const target = inputEvent.target as HTMLInputElement\n        const action = 'click'\n\n        const accept = this.accept.split('/')[0]\n        const files = Array.from(target.files as FileList)\n          .filter(file => file.type.split('/')[0] === accept)\n\n        this.dispatchEvent(new FileDropEvent('filedrop', { action, files }))\n\n        input.parentNode?.removeChild(input)\n      })\n\n      document.body.appendChild(input)\n      input.dispatchEvent(click)\n    })\n  }\n}\n\nFilesDropElement.register()\n\ndeclare global {\n  interface HTMLElementEventMap {\n    filedrop: FileDropEvent\n  }\n}\n"],"names":["getMatchingItems","list","acceptVal","multiple","dataItems","Array","from","results","filter","item","kind","accepts","toLowerCase","split","map","accept","part","trim","acceptParts","length","typeMain","typeSub","type","s","acceptMain","acceptSub","getFileData","data","dragDataItems","items","files","forEach","file","getAsFile","push","FileDropEvent","Event","constructor","typeArg","eventInitDict","super","this","_action","_files","Object","setPrototypeOf","prototype","action","FilesDropElement","HTMLElement","register","tag","window","customElements","define","_dragEnterCount","_onDragEnter","bind","_onDragLeave","_onDrop","_onPaste","_onClick","getAttribute","val","setAttribute","hasAttribute","clickable","connectedCallback","addEventListener","event","preventDefault","_reset","disconnectedCallback","removeEventListener","dataTransfer","classList","add","matchingFiles","undefined","dispatchEvent","clipboardData","remove","Promise","input","document","createElement","click","MouseEvent","cancelable","bubbles","view","assign","style","visibility","position","left","top","inputEvent","_input$parentNode","target","parentNode","removeChild","body","appendChild"],"mappings":"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"}